// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Authentication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Authentication_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticationAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticationAnswer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuthenticationAnswer_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achievement_Ident_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_Ident_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Achievement_Ident_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameIdent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Messages_2eproto() {
  protobuf_AddDesc_Messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Messages.proto");
  GOOGLE_CHECK(file != NULL);
  Authentication_descriptor_ = file->message_type(0);
  static const int Authentication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, password_),
  };
  Authentication_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Authentication_descriptor_,
      Authentication::default_instance_,
      Authentication_offsets_,
      -1,
      -1,
      -1,
      sizeof(Authentication),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, _is_default_instance_));
  AuthenticationAnswer_descriptor_ = file->message_type(1);
  static const int AuthenticationAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationAnswer, result_),
  };
  AuthenticationAnswer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AuthenticationAnswer_descriptor_,
      AuthenticationAnswer::default_instance_,
      AuthenticationAnswer_offsets_,
      -1,
      -1,
      -1,
      sizeof(AuthenticationAnswer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationAnswer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationAnswer, _is_default_instance_));
  AuthenticationAnswer_Result_descriptor_ = AuthenticationAnswer_descriptor_->enum_type(0);
  Achievement_descriptor_ = file->message_type(2);
  static const int Achievement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, achievements_),
  };
  Achievement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Achievement_descriptor_,
      Achievement::default_instance_,
      Achievement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Achievement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _is_default_instance_));
  Achievement_Ident_descriptor_ = Achievement_descriptor_->nested_type(0);
  static const int Achievement_Ident_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement_Ident, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement_Ident, type_),
  };
  Achievement_Ident_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Achievement_Ident_descriptor_,
      Achievement_Ident::default_instance_,
      Achievement_Ident_offsets_,
      -1,
      -1,
      -1,
      sizeof(Achievement_Ident),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement_Ident, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement_Ident, _is_default_instance_));
  Achievement_Ident_Type_descriptor_ = Achievement_Ident_descriptor_->enum_type(0);
  GameIdent_descriptor_ = file->message_type(3);
  static const int GameIdent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, hash_),
  };
  GameIdent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameIdent_descriptor_,
      GameIdent::default_instance_,
      GameIdent_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameIdent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Authentication_descriptor_, &Authentication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AuthenticationAnswer_descriptor_, &AuthenticationAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Achievement_descriptor_, &Achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Achievement_Ident_descriptor_, &Achievement_Ident::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameIdent_descriptor_, &GameIdent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Messages_2eproto() {
  delete Authentication::default_instance_;
  delete Authentication_reflection_;
  delete AuthenticationAnswer::default_instance_;
  delete AuthenticationAnswer_reflection_;
  delete Achievement::default_instance_;
  delete Achievement_reflection_;
  delete Achievement_Ident::default_instance_;
  delete Achievement_Ident_reflection_;
  delete GameIdent::default_instance_;
  delete GameIdent_reflection_;
}

void protobuf_AddDesc_Messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Messages.proto\022\010protobuf\"0\n\016Authentica"
    "tion\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\014\"\217\001\n"
    "\024AuthenticationAnswer\0225\n\006result\030\001 \001(\0162%."
    "protobuf.AuthenticationAnswer.Result\"@\n\006"
    "Result\022\013\n\007success\020\000\022\013\n\007unknown\020\001\022\021\n\rwron"
    "gPassword\020\002\022\t\n\005other\020\003\"\311\001\n\013Achievement\022#"
    "\n\006gameID\030\001 \001(\0132\023.protobuf.GameIdent\0221\n\014a"
    "chievements\030\002 \003(\0132\033.protobuf.Achievement"
    ".Ident\032b\n\005Ident\022\n\n\002ID\030\001 \001(\004\022.\n\004type\030\002 \001("
    "\0162 .protobuf.Achievement.Ident.Type\"\035\n\004T"
    "ype\022\014\n\010complete\020\000\022\007\n\003add\020\001\")\n\tGameIdent\022"
    "\016\n\006gameID\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014b\006proto3", 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Messages.proto", &protobuf_RegisterTypes);
  Authentication::default_instance_ = new Authentication();
  AuthenticationAnswer::default_instance_ = new AuthenticationAnswer();
  Achievement::default_instance_ = new Achievement();
  Achievement_Ident::default_instance_ = new Achievement_Ident();
  GameIdent::default_instance_ = new GameIdent();
  Authentication::default_instance_->InitAsDefaultInstance();
  AuthenticationAnswer::default_instance_->InitAsDefaultInstance();
  Achievement::default_instance_->InitAsDefaultInstance();
  Achievement_Ident::default_instance_->InitAsDefaultInstance();
  GameIdent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Messages_2eproto {
  StaticDescriptorInitializer_Messages_2eproto() {
    protobuf_AddDesc_Messages_2eproto();
  }
} static_descriptor_initializer_Messages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Authentication::kNameFieldNumber;
const int Authentication::kPasswordFieldNumber;
#endif  // !_MSC_VER

Authentication::Authentication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Authentication)
}

void Authentication::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Authentication::Authentication(const Authentication& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Authentication)
}

void Authentication::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Authentication::~Authentication() {
  // @@protoc_insertion_point(destructor:protobuf.Authentication)
  SharedDtor();
}

void Authentication::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authentication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Authentication_descriptor_;
}

const Authentication& Authentication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

Authentication* Authentication::default_instance_ = NULL;

Authentication* Authentication::New(::google::protobuf::Arena* arena) const {
  Authentication* n = new Authentication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authentication::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Authentication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf.Authentication.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Authentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Authentication)
  return false;
#undef DO_
}

void Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Authentication)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.Authentication.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf.Authentication)
}

::google::protobuf::uint8* Authentication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Authentication)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf.Authentication.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Authentication)
  return target;
}

int Authentication::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authentication::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Authentication* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Authentication>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Authentication::MergeFrom(const Authentication& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Authentication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authentication::CopyFrom(const Authentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authentication::IsInitialized() const {

  return true;
}

void Authentication::Swap(Authentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authentication::InternalSwap(Authentication* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authentication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Authentication_descriptor_;
  metadata.reflection = Authentication_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authentication

// optional string name = 1;
void Authentication::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Authentication::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authentication::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Authentication.name)
}
 void Authentication::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Authentication.name)
}
 void Authentication::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Authentication.name)
}
 ::std::string* Authentication::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Authentication.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Authentication::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authentication::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Authentication.name)
}

// optional bytes password = 2;
void Authentication::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Authentication::password() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authentication::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Authentication.password)
}
 void Authentication::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Authentication.password)
}
 void Authentication::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Authentication.password)
}
 ::std::string* Authentication::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Authentication.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Authentication::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Authentication::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Authentication.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AuthenticationAnswer_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationAnswer_Result_descriptor_;
}
bool AuthenticationAnswer_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AuthenticationAnswer_Result AuthenticationAnswer::success;
const AuthenticationAnswer_Result AuthenticationAnswer::unknown;
const AuthenticationAnswer_Result AuthenticationAnswer::wrongPassword;
const AuthenticationAnswer_Result AuthenticationAnswer::other;
const AuthenticationAnswer_Result AuthenticationAnswer::Result_MIN;
const AuthenticationAnswer_Result AuthenticationAnswer::Result_MAX;
const int AuthenticationAnswer::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AuthenticationAnswer::kResultFieldNumber;
#endif  // !_MSC_VER

AuthenticationAnswer::AuthenticationAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.AuthenticationAnswer)
}

void AuthenticationAnswer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AuthenticationAnswer::AuthenticationAnswer(const AuthenticationAnswer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.AuthenticationAnswer)
}

void AuthenticationAnswer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

AuthenticationAnswer::~AuthenticationAnswer() {
  // @@protoc_insertion_point(destructor:protobuf.AuthenticationAnswer)
  SharedDtor();
}

void AuthenticationAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthenticationAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationAnswer_descriptor_;
}

const AuthenticationAnswer& AuthenticationAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

AuthenticationAnswer* AuthenticationAnswer::default_instance_ = NULL;

AuthenticationAnswer* AuthenticationAnswer::New(::google::protobuf::Arena* arena) const {
  AuthenticationAnswer* n = new AuthenticationAnswer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticationAnswer::Clear() {
  result_ = 0;
}

bool AuthenticationAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.AuthenticationAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.AuthenticationAnswer.Result result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::protobuf::AuthenticationAnswer_Result >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.AuthenticationAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.AuthenticationAnswer)
  return false;
#undef DO_
}

void AuthenticationAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.AuthenticationAnswer)
  // optional .protobuf.AuthenticationAnswer.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf.AuthenticationAnswer)
}

::google::protobuf::uint8* AuthenticationAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.AuthenticationAnswer)
  // optional .protobuf.AuthenticationAnswer.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf.AuthenticationAnswer)
  return target;
}

int AuthenticationAnswer::ByteSize() const {
  int total_size = 0;

  // optional .protobuf.AuthenticationAnswer.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AuthenticationAnswer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticationAnswer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticationAnswer::MergeFrom(const AuthenticationAnswer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AuthenticationAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationAnswer::CopyFrom(const AuthenticationAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationAnswer::IsInitialized() const {

  return true;
}

void AuthenticationAnswer::Swap(AuthenticationAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticationAnswer::InternalSwap(AuthenticationAnswer* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticationAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticationAnswer_descriptor_;
  metadata.reflection = AuthenticationAnswer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticationAnswer

// optional .protobuf.AuthenticationAnswer.Result result = 1;
void AuthenticationAnswer::clear_result() {
  result_ = 0;
}
 ::protobuf::AuthenticationAnswer_Result AuthenticationAnswer::result() const {
  // @@protoc_insertion_point(field_get:protobuf.AuthenticationAnswer.result)
  return static_cast< ::protobuf::AuthenticationAnswer_Result >(result_);
}
 void AuthenticationAnswer::set_result(::protobuf::AuthenticationAnswer_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protobuf.AuthenticationAnswer.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Achievement_Ident_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_Ident_Type_descriptor_;
}
bool Achievement_Ident_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Achievement_Ident_Type Achievement_Ident::complete;
const Achievement_Ident_Type Achievement_Ident::add;
const Achievement_Ident_Type Achievement_Ident::Type_MIN;
const Achievement_Ident_Type Achievement_Ident::Type_MAX;
const int Achievement_Ident::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Achievement_Ident::kIDFieldNumber;
const int Achievement_Ident::kTypeFieldNumber;
#endif  // !_MSC_VER

Achievement_Ident::Achievement_Ident()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Achievement.Ident)
}

void Achievement_Ident::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Achievement_Ident::Achievement_Ident(const Achievement_Ident& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Achievement.Ident)
}

void Achievement_Ident::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
}

Achievement_Ident::~Achievement_Ident() {
  // @@protoc_insertion_point(destructor:protobuf.Achievement.Ident)
  SharedDtor();
}

void Achievement_Ident::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achievement_Ident::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement_Ident::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_Ident_descriptor_;
}

const Achievement_Ident& Achievement_Ident::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

Achievement_Ident* Achievement_Ident::default_instance_ = NULL;

Achievement_Ident* Achievement_Ident::New(::google::protobuf::Arena* arena) const {
  Achievement_Ident* n = new Achievement_Ident;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Achievement_Ident::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Achievement_Ident*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool Achievement_Ident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Achievement.Ident)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protobuf.Achievement.Ident.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protobuf::Achievement_Ident_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Achievement.Ident)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Achievement.Ident)
  return false;
#undef DO_
}

void Achievement_Ident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Achievement.Ident)
  // optional uint64 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .protobuf.Achievement.Ident.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf.Achievement.Ident)
}

::google::protobuf::uint8* Achievement_Ident::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Achievement.Ident)
  // optional uint64 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .protobuf.Achievement.Ident.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Achievement.Ident)
  return target;
}

int Achievement_Ident::ByteSize() const {
  int total_size = 0;

  // optional uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional .protobuf.Achievement.Ident.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement_Ident::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Achievement_Ident* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Achievement_Ident>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement_Ident::MergeFrom(const Achievement_Ident& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Achievement_Ident::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement_Ident::CopyFrom(const Achievement_Ident& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement_Ident::IsInitialized() const {

  return true;
}

void Achievement_Ident::Swap(Achievement_Ident* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Achievement_Ident::InternalSwap(Achievement_Ident* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Achievement_Ident::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_Ident_descriptor_;
  metadata.reflection = Achievement_Ident_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Achievement::kGameIDFieldNumber;
const int Achievement::kAchievementsFieldNumber;
#endif  // !_MSC_VER

Achievement::Achievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Achievement)
}

void Achievement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  gameid_ = const_cast< ::protobuf::GameIdent*>(&::protobuf::GameIdent::default_instance());
}

Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Achievement)
}

void Achievement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gameid_ = NULL;
}

Achievement::~Achievement() {
  // @@protoc_insertion_point(destructor:protobuf.Achievement)
  SharedDtor();
}

void Achievement::SharedDtor() {
  if (this != default_instance_) {
    delete gameid_;
  }
}

void Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_descriptor_;
}

const Achievement& Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

Achievement* Achievement::default_instance_ = NULL;

Achievement* Achievement::New(::google::protobuf::Arena* arena) const {
  Achievement* n = new Achievement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Achievement::Clear() {
  if (GetArenaNoVirtual() == NULL && gameid_ != NULL) delete gameid_;
  gameid_ = NULL;
  achievements_.Clear();
}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Achievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.GameIdent gameID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_achievements;
        break;
      }

      // repeated .protobuf.Achievement.Ident achievements = 2;
      case 2: {
        if (tag == 18) {
         parse_achievements:
          DO_(input->IncrementRecursionDepth());
         parse_loop_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_achievements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Achievement)
  return false;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Achievement)
  // optional .protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gameid_, output);
  }

  // repeated .protobuf.Achievement.Ident achievements = 2;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf.Achievement)
}

::google::protobuf::uint8* Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Achievement)
  // optional .protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->gameid_, target);
  }

  // repeated .protobuf.Achievement.Ident achievements = 2;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Achievement)
  return target;
}

int Achievement::ByteSize() const {
  int total_size = 0;

  // optional .protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameid_);
  }

  // repeated .protobuf.Achievement.Ident achievements = 2;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Achievement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Achievement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  achievements_.MergeFrom(from.achievements_);
  if (from.has_gameid()) {
    mutable_gameid()->::protobuf::GameIdent::MergeFrom(from.gameid());
  }
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {

  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Achievement::InternalSwap(Achievement* other) {
  std::swap(gameid_, other->gameid_);
  achievements_.UnsafeArenaSwap(&other->achievements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_descriptor_;
  metadata.reflection = Achievement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Achievement_Ident

// optional uint64 ID = 1;
void Achievement_Ident::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Achievement_Ident::id() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.Ident.ID)
  return id_;
}
 void Achievement_Ident::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.Ident.ID)
}

// optional .protobuf.Achievement.Ident.Type type = 2;
void Achievement_Ident::clear_type() {
  type_ = 0;
}
 ::protobuf::Achievement_Ident_Type Achievement_Ident::type() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.Ident.type)
  return static_cast< ::protobuf::Achievement_Ident_Type >(type_);
}
 void Achievement_Ident::set_type(::protobuf::Achievement_Ident_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.Ident.type)
}

// -------------------------------------------------------------------

// Achievement

// optional .protobuf.GameIdent gameID = 1;
bool Achievement::has_gameid() const {
  return !_is_default_instance_ && gameid_ != NULL;
}
void Achievement::clear_gameid() {
  if (GetArenaNoVirtual() == NULL && gameid_ != NULL) delete gameid_;
  gameid_ = NULL;
}
const ::protobuf::GameIdent& Achievement::gameid() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.gameID)
  return gameid_ != NULL ? *gameid_ : *default_instance_->gameid_;
}
::protobuf::GameIdent* Achievement::mutable_gameid() {
  
  if (gameid_ == NULL) {
    gameid_ = new ::protobuf::GameIdent;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Achievement.gameID)
  return gameid_;
}
::protobuf::GameIdent* Achievement::release_gameid() {
  
  ::protobuf::GameIdent* temp = gameid_;
  gameid_ = NULL;
  return temp;
}
void Achievement::set_allocated_gameid(::protobuf::GameIdent* gameid) {
  delete gameid_;
  gameid_ = gameid;
  if (gameid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Achievement.gameID)
}

// repeated .protobuf.Achievement.Ident achievements = 2;
int Achievement::achievements_size() const {
  return achievements_.size();
}
void Achievement::clear_achievements() {
  achievements_.Clear();
}
const ::protobuf::Achievement_Ident& Achievement::achievements(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.achievements)
  return achievements_.Get(index);
}
::protobuf::Achievement_Ident* Achievement::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Achievement.achievements)
  return achievements_.Mutable(index);
}
::protobuf::Achievement_Ident* Achievement::add_achievements() {
  // @@protoc_insertion_point(field_add:protobuf.Achievement.achievements)
  return achievements_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >*
Achievement::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Achievement.achievements)
  return &achievements_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >&
Achievement::achievements() const {
  // @@protoc_insertion_point(field_list:protobuf.Achievement.achievements)
  return achievements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameIdent::kGameIDFieldNumber;
const int GameIdent::kHashFieldNumber;
#endif  // !_MSC_VER

GameIdent::GameIdent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.GameIdent)
}

void GameIdent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameIdent::GameIdent(const GameIdent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.GameIdent)
}

void GameIdent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = GOOGLE_ULONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameIdent::~GameIdent() {
  // @@protoc_insertion_point(destructor:protobuf.GameIdent)
  SharedDtor();
}

void GameIdent::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameIdent_descriptor_;
}

const GameIdent& GameIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

GameIdent* GameIdent::default_instance_ = NULL;

GameIdent* GameIdent::New(::google::protobuf::Arena* arena) const {
  GameIdent* n = new GameIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameIdent::Clear() {
  gameid_ = GOOGLE_ULONGLONG(0);
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.GameIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.GameIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.GameIdent)
  return false;
#undef DO_
}

void GameIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.GameIdent)
  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf.GameIdent)
}

::google::protobuf::uint8* GameIdent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.GameIdent)
  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf.GameIdent)
  return target;
}

int GameIdent::ByteSize() const {
  int total_size = 0;

  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gameid());
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameIdent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameIdent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameIdent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameIdent::MergeFrom(const GameIdent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GameIdent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameIdent::CopyFrom(const GameIdent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameIdent::IsInitialized() const {

  return true;
}

void GameIdent::Swap(GameIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameIdent::InternalSwap(GameIdent* other) {
  std::swap(gameid_, other->gameid_);
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameIdent_descriptor_;
  metadata.reflection = GameIdent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameIdent

// optional uint64 gameID = 1;
void GameIdent::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GameIdent::gameid() const {
  // @@protoc_insertion_point(field_get:protobuf.GameIdent.gameID)
  return gameid_;
}
 void GameIdent::set_gameid(::google::protobuf::uint64 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GameIdent.gameID)
}

// optional bytes hash = 2;
void GameIdent::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GameIdent::hash() const {
  // @@protoc_insertion_point(field_get:protobuf.GameIdent.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameIdent::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GameIdent.hash)
}
 void GameIdent::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GameIdent.hash)
}
 void GameIdent::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GameIdent.hash)
}
 ::std::string* GameIdent::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GameIdent.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameIdent::release_hash() {
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameIdent::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GameIdent.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
