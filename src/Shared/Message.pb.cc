// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Achievement_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      -1,
      -1,
      -1,
      sizeof(Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _is_default_instance_));
  GameAchievement_descriptor_ = file->message_type(1);
  static const int GameAchievement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAchievement, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAchievement, achievements_),
  };
  GameAchievement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameAchievement_descriptor_,
      GameAchievement::default_instance_,
      GameAchievement_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameAchievement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAchievement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAchievement, _is_default_instance_));
  GameIdent_descriptor_ = file->message_type(2);
  static const int GameIdent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, hash_),
  };
  GameIdent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameIdent_descriptor_,
      GameIdent::default_instance_,
      GameIdent_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameIdent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameIdent, _is_default_instance_));
  Achievement_descriptor_ = file->message_type(3);
  static const int Achievement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, type_),
  };
  Achievement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Achievement_descriptor_,
      Achievement::default_instance_,
      Achievement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Achievement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _is_default_instance_));
  Achievement_Type_descriptor_ = Achievement_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameAchievement_descriptor_, &GameAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameIdent_descriptor_, &GameIdent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Achievement_descriptor_, &Achievement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete GameAchievement::default_instance_;
  delete GameAchievement_reflection_;
  delete GameIdent::default_instance_;
  delete GameIdent_reflection_;
  delete Achievement::default_instance_;
  delete Achievement_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\022\020network.protobuf\"\'\n\005Log"
    "in\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"s\n\017Ga"
    "meAchievement\022+\n\006gameID\030\001 \001(\0132\033.network."
    "protobuf.GameIdent\0223\n\014achievements\030\002 \003(\013"
    "2\035.network.protobuf.Achievement\")\n\tGameI"
    "dent\022\016\n\006gameID\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014\"j\n\013Ac"
    "hievement\022\n\n\002ID\030\001 \001(\r\0220\n\004type\030\002 \001(\0162\".ne"
    "twork.protobuf.Achievement.Type\"\035\n\004Type\022"
    "\014\n\010COMPLETE\020\000\022\007\n\003ADD\020\001b\006proto3", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  GameAchievement::default_instance_ = new GameAchievement();
  GameIdent::default_instance_ = new GameIdent();
  Achievement::default_instance_ = new Achievement();
  Login::default_instance_->InitAsDefaultInstance();
  GameAchievement::default_instance_->InitAsDefaultInstance();
  GameIdent::default_instance_->InitAsDefaultInstance();
  Achievement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Login::kNameFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.protobuf.Login)
}

void Login::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Login::Login(const Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.protobuf.Login)
}

void Login::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:network.protobuf.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.protobuf.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "network.protobuf.Login.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "network.protobuf.Login.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.protobuf.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.protobuf.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.protobuf.Login)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "network.protobuf.Login.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "network.protobuf.Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:network.protobuf.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.protobuf.Login)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "network.protobuf.Login.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "network.protobuf.Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:network.protobuf.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// optional string name = 1;
void Login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:network.protobuf.Login.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.protobuf.Login.name)
}
 void Login::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.protobuf.Login.name)
}
 void Login::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.protobuf.Login.name)
}
 ::std::string* Login::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:network.protobuf.Login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:network.protobuf.Login.name)
}

// optional string password = 2;
void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:network.protobuf.Login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.protobuf.Login.password)
}
 void Login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.protobuf.Login.password)
}
 void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.protobuf.Login.password)
}
 ::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:network.protobuf.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Login::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:network.protobuf.Login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameAchievement::kGameIDFieldNumber;
const int GameAchievement::kAchievementsFieldNumber;
#endif  // !_MSC_VER

GameAchievement::GameAchievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.protobuf.GameAchievement)
}

void GameAchievement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  gameid_ = const_cast< ::network::protobuf::GameIdent*>(&::network::protobuf::GameIdent::default_instance());
}

GameAchievement::GameAchievement(const GameAchievement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.protobuf.GameAchievement)
}

void GameAchievement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  gameid_ = NULL;
}

GameAchievement::~GameAchievement() {
  // @@protoc_insertion_point(destructor:network.protobuf.GameAchievement)
  SharedDtor();
}

void GameAchievement::SharedDtor() {
  if (this != default_instance_) {
    delete gameid_;
  }
}

void GameAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAchievement_descriptor_;
}

const GameAchievement& GameAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

GameAchievement* GameAchievement::default_instance_ = NULL;

GameAchievement* GameAchievement::New(::google::protobuf::Arena* arena) const {
  GameAchievement* n = new GameAchievement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameAchievement::Clear() {
  if (GetArenaNoVirtual() == NULL && gameid_ != NULL) delete gameid_;
  gameid_ = NULL;
  achievements_.Clear();
}

bool GameAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.protobuf.GameAchievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .network.protobuf.GameIdent gameID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_achievements;
        break;
      }

      // repeated .network.protobuf.Achievement achievements = 2;
      case 2: {
        if (tag == 18) {
         parse_achievements:
          DO_(input->IncrementRecursionDepth());
         parse_loop_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_achievements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.protobuf.GameAchievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.protobuf.GameAchievement)
  return false;
#undef DO_
}

void GameAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.protobuf.GameAchievement)
  // optional .network.protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gameid_, output);
  }

  // repeated .network.protobuf.Achievement achievements = 2;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:network.protobuf.GameAchievement)
}

::google::protobuf::uint8* GameAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.protobuf.GameAchievement)
  // optional .network.protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->gameid_, target);
  }

  // repeated .network.protobuf.Achievement achievements = 2;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:network.protobuf.GameAchievement)
  return target;
}

int GameAchievement::ByteSize() const {
  int total_size = 0;

  // optional .network.protobuf.GameIdent gameID = 1;
  if (this->has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameid_);
  }

  // repeated .network.protobuf.Achievement achievements = 2;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameAchievement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameAchievement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAchievement::MergeFrom(const GameAchievement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  achievements_.MergeFrom(from.achievements_);
  if (from.has_gameid()) {
    mutable_gameid()->::network::protobuf::GameIdent::MergeFrom(from.gameid());
  }
}

void GameAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAchievement::CopyFrom(const GameAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAchievement::IsInitialized() const {

  return true;
}

void GameAchievement::Swap(GameAchievement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAchievement::InternalSwap(GameAchievement* other) {
  std::swap(gameid_, other->gameid_);
  achievements_.UnsafeArenaSwap(&other->achievements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAchievement_descriptor_;
  metadata.reflection = GameAchievement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameAchievement

// optional .network.protobuf.GameIdent gameID = 1;
bool GameAchievement::has_gameid() const {
  return !_is_default_instance_ && gameid_ != NULL;
}
void GameAchievement::clear_gameid() {
  if (GetArenaNoVirtual() == NULL && gameid_ != NULL) delete gameid_;
  gameid_ = NULL;
}
const ::network::protobuf::GameIdent& GameAchievement::gameid() const {
  // @@protoc_insertion_point(field_get:network.protobuf.GameAchievement.gameID)
  return gameid_ != NULL ? *gameid_ : *default_instance_->gameid_;
}
::network::protobuf::GameIdent* GameAchievement::mutable_gameid() {
  
  if (gameid_ == NULL) {
    gameid_ = new ::network::protobuf::GameIdent;
  }
  // @@protoc_insertion_point(field_mutable:network.protobuf.GameAchievement.gameID)
  return gameid_;
}
::network::protobuf::GameIdent* GameAchievement::release_gameid() {
  
  ::network::protobuf::GameIdent* temp = gameid_;
  gameid_ = NULL;
  return temp;
}
void GameAchievement::set_allocated_gameid(::network::protobuf::GameIdent* gameid) {
  delete gameid_;
  gameid_ = gameid;
  if (gameid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:network.protobuf.GameAchievement.gameID)
}

// repeated .network.protobuf.Achievement achievements = 2;
int GameAchievement::achievements_size() const {
  return achievements_.size();
}
void GameAchievement::clear_achievements() {
  achievements_.Clear();
}
const ::network::protobuf::Achievement& GameAchievement::achievements(int index) const {
  // @@protoc_insertion_point(field_get:network.protobuf.GameAchievement.achievements)
  return achievements_.Get(index);
}
::network::protobuf::Achievement* GameAchievement::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:network.protobuf.GameAchievement.achievements)
  return achievements_.Mutable(index);
}
::network::protobuf::Achievement* GameAchievement::add_achievements() {
  // @@protoc_insertion_point(field_add:network.protobuf.GameAchievement.achievements)
  return achievements_.Add();
}
::google::protobuf::RepeatedPtrField< ::network::protobuf::Achievement >*
GameAchievement::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:network.protobuf.GameAchievement.achievements)
  return &achievements_;
}
const ::google::protobuf::RepeatedPtrField< ::network::protobuf::Achievement >&
GameAchievement::achievements() const {
  // @@protoc_insertion_point(field_list:network.protobuf.GameAchievement.achievements)
  return achievements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameIdent::kGameIDFieldNumber;
const int GameIdent::kHashFieldNumber;
#endif  // !_MSC_VER

GameIdent::GameIdent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.protobuf.GameIdent)
}

void GameIdent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GameIdent::GameIdent(const GameIdent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.protobuf.GameIdent)
}

void GameIdent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = GOOGLE_ULONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameIdent::~GameIdent() {
  // @@protoc_insertion_point(destructor:network.protobuf.GameIdent)
  SharedDtor();
}

void GameIdent::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameIdent_descriptor_;
}

const GameIdent& GameIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

GameIdent* GameIdent::default_instance_ = NULL;

GameIdent* GameIdent::New(::google::protobuf::Arena* arena) const {
  GameIdent* n = new GameIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameIdent::Clear() {
  gameid_ = GOOGLE_ULONGLONG(0);
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.protobuf.GameIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.protobuf.GameIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.protobuf.GameIdent)
  return false;
#undef DO_
}

void GameIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.protobuf.GameIdent)
  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:network.protobuf.GameIdent)
}

::google::protobuf::uint8* GameIdent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.protobuf.GameIdent)
  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:network.protobuf.GameIdent)
  return target;
}

int GameIdent::ByteSize() const {
  int total_size = 0;

  // optional uint64 gameID = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gameid());
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameIdent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameIdent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameIdent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameIdent::MergeFrom(const GameIdent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void GameIdent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameIdent::CopyFrom(const GameIdent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameIdent::IsInitialized() const {

  return true;
}

void GameIdent::Swap(GameIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameIdent::InternalSwap(GameIdent* other) {
  std::swap(gameid_, other->gameid_);
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameIdent_descriptor_;
  metadata.reflection = GameIdent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameIdent

// optional uint64 gameID = 1;
void GameIdent::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GameIdent::gameid() const {
  // @@protoc_insertion_point(field_get:network.protobuf.GameIdent.gameID)
  return gameid_;
}
 void GameIdent::set_gameid(::google::protobuf::uint64 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:network.protobuf.GameIdent.gameID)
}

// optional bytes hash = 2;
void GameIdent::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GameIdent::hash() const {
  // @@protoc_insertion_point(field_get:network.protobuf.GameIdent.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameIdent::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.protobuf.GameIdent.hash)
}
 void GameIdent::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.protobuf.GameIdent.hash)
}
 void GameIdent::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.protobuf.GameIdent.hash)
}
 ::std::string* GameIdent::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:network.protobuf.GameIdent.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameIdent::release_hash() {
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameIdent::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:network.protobuf.GameIdent.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Achievement_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_Type_descriptor_;
}
bool Achievement_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Achievement_Type Achievement::COMPLETE;
const Achievement_Type Achievement::ADD;
const Achievement_Type Achievement::Type_MIN;
const Achievement_Type Achievement::Type_MAX;
const int Achievement::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Achievement::kIDFieldNumber;
const int Achievement::kTypeFieldNumber;
#endif  // !_MSC_VER

Achievement::Achievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.protobuf.Achievement)
}

void Achievement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:network.protobuf.Achievement)
}

void Achievement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
}

Achievement::~Achievement() {
  // @@protoc_insertion_point(destructor:network.protobuf.Achievement)
  SharedDtor();
}

void Achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_descriptor_;
}

const Achievement& Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();
  return *default_instance_;
}

Achievement* Achievement::default_instance_ = NULL;

Achievement* Achievement::New(::google::protobuf::Arena* arena) const {
  Achievement* n = new Achievement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Achievement::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Achievement*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:network.protobuf.Achievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .network.protobuf.Achievement.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::network::protobuf::Achievement_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.protobuf.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.protobuf.Achievement)
  return false;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.protobuf.Achievement)
  // optional uint32 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .network.protobuf.Achievement.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:network.protobuf.Achievement)
}

::google::protobuf::uint8* Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:network.protobuf.Achievement)
  // optional uint32 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .network.protobuf.Achievement.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:network.protobuf.Achievement)
  return target;
}

int Achievement::ByteSize() const {
  int total_size = 0;

  // optional uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .network.protobuf.Achievement.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Achievement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Achievement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {

  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Achievement::InternalSwap(Achievement* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_descriptor_;
  metadata.reflection = Achievement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Achievement

// optional uint32 ID = 1;
void Achievement::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Achievement::id() const {
  // @@protoc_insertion_point(field_get:network.protobuf.Achievement.ID)
  return id_;
}
 void Achievement::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:network.protobuf.Achievement.ID)
}

// optional .network.protobuf.Achievement.Type type = 2;
void Achievement::clear_type() {
  type_ = 0;
}
 ::network::protobuf::Achievement_Type Achievement::type() const {
  // @@protoc_insertion_point(field_get:network.protobuf.Achievement.type)
  return static_cast< ::network::protobuf::Achievement_Type >(type_);
}
 void Achievement::set_type(::network::protobuf::Achievement_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:network.protobuf.Achievement.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace network

// @@protoc_insertion_point(global_scope)
