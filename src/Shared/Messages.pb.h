// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Achievement;
class AchievementReply;
class Authentication;
class AuthenticationReply;
class Login;
class LoginReply;
class Welcome;

enum Achievement_Type {
  Achievement_Type_complete = 0,
  Achievement_Type_add = 1,
  Achievement_Type_Achievement_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Achievement_Type_Achievement_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Achievement_Type_IsValid(int value);
const Achievement_Type Achievement_Type_Type_MIN = Achievement_Type_complete;
const Achievement_Type Achievement_Type_Type_MAX = Achievement_Type_add;
const int Achievement_Type_Type_ARRAYSIZE = Achievement_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Achievement_Type_descriptor();
inline const ::std::string& Achievement_Type_Name(Achievement_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Achievement_Type_descriptor(), value);
}
inline bool Achievement_Type_Parse(
    const ::std::string& name, Achievement_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Achievement_Type>(
    Achievement_Type_descriptor(), name, value);
}
enum AchievementReply_Type {
  AchievementReply_Type_complete = 0,
  AchievementReply_Type_failed = 1,
  AchievementReply_Type_exists = 2,
  AchievementReply_Type_progress = 3,
  AchievementReply_Type_AchievementReply_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AchievementReply_Type_AchievementReply_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AchievementReply_Type_IsValid(int value);
const AchievementReply_Type AchievementReply_Type_Type_MIN = AchievementReply_Type_complete;
const AchievementReply_Type AchievementReply_Type_Type_MAX = AchievementReply_Type_progress;
const int AchievementReply_Type_Type_ARRAYSIZE = AchievementReply_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* AchievementReply_Type_descriptor();
inline const ::std::string& AchievementReply_Type_Name(AchievementReply_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    AchievementReply_Type_descriptor(), value);
}
inline bool AchievementReply_Type_Parse(
    const ::std::string& name, AchievementReply_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AchievementReply_Type>(
    AchievementReply_Type_descriptor(), name, value);
}
// ===================================================================

class Authentication : public ::google::protobuf::Message {
 public:
  Authentication();
  virtual ~Authentication();

  Authentication(const Authentication& from);

  inline Authentication& operator=(const Authentication& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Authentication& default_instance();

  void Swap(Authentication* other);

  // implements Message ----------------------------------------------

  inline Authentication* New() const { return New(NULL); }

  Authentication* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Authentication& from);
  void MergeFrom(const Authentication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Authentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:protobuf.Authentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Authentication* default_instance_;
};
// -------------------------------------------------------------------

class AuthenticationReply : public ::google::protobuf::Message {
 public:
  AuthenticationReply();
  virtual ~AuthenticationReply();

  AuthenticationReply(const AuthenticationReply& from);

  inline AuthenticationReply& operator=(const AuthenticationReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticationReply& default_instance();

  void Swap(AuthenticationReply* other);

  // implements Message ----------------------------------------------

  inline AuthenticationReply* New() const { return New(NULL); }

  AuthenticationReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticationReply& from);
  void MergeFrom(const AuthenticationReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticationReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.AuthenticationReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static AuthenticationReply* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  inline Login* New() const { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:protobuf.Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginReply : public ::google::protobuf::Message {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReply& default_instance();

  void Swap(LoginReply* other);

  // implements Message ----------------------------------------------

  inline LoginReply* New() const { return New(NULL); }

  LoginReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:protobuf.LoginReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static LoginReply* default_instance_;
};
// -------------------------------------------------------------------

class Achievement : public ::google::protobuf::Message {
 public:
  Achievement();
  virtual ~Achievement();

  Achievement(const Achievement& from);

  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();

  void Swap(Achievement* other);

  // implements Message ----------------------------------------------

  inline Achievement* New() const { return New(NULL); }

  Achievement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Achievement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Achievement_Type Type;
  static const Type complete = Achievement_Type_complete;
  static const Type add = Achievement_Type_add;
  static inline bool Type_IsValid(int value) {
    return Achievement_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Achievement_Type_Type_MIN;
  static const Type Type_MAX =
    Achievement_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Achievement_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Achievement_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Achievement_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Achievement_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .protobuf.Achievement.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::protobuf::Achievement_Type type() const;
  void set_type(::protobuf::Achievement_Type value);

  // @@protoc_insertion_point(class_scope:protobuf.Achievement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Achievement* default_instance_;
};
// -------------------------------------------------------------------

class AchievementReply : public ::google::protobuf::Message {
 public:
  AchievementReply();
  virtual ~AchievementReply();

  AchievementReply(const AchievementReply& from);

  inline AchievementReply& operator=(const AchievementReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementReply& default_instance();

  void Swap(AchievementReply* other);

  // implements Message ----------------------------------------------

  inline AchievementReply* New() const { return New(NULL); }

  AchievementReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementReply& from);
  void MergeFrom(const AchievementReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AchievementReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AchievementReply_Type Type;
  static const Type complete = AchievementReply_Type_complete;
  static const Type failed = AchievementReply_Type_failed;
  static const Type exists = AchievementReply_Type_exists;
  static const Type progress = AchievementReply_Type_progress;
  static inline bool Type_IsValid(int value) {
    return AchievementReply_Type_IsValid(value);
  }
  static const Type Type_MIN =
    AchievementReply_Type_Type_MIN;
  static const Type Type_MAX =
    AchievementReply_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    AchievementReply_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return AchievementReply_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return AchievementReply_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return AchievementReply_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .protobuf.AchievementReply.Type result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::protobuf::AchievementReply_Type result() const;
  void set_result(::protobuf::AchievementReply_Type value);

  // @@protoc_insertion_point(class_scope:protobuf.AchievementReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static AchievementReply* default_instance_;
};
// -------------------------------------------------------------------

class Welcome : public ::google::protobuf::Message {
 public:
  Welcome();
  virtual ~Welcome();

  Welcome(const Welcome& from);

  inline Welcome& operator=(const Welcome& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Welcome& default_instance();

  void Swap(Welcome* other);

  // implements Message ----------------------------------------------

  inline Welcome* New() const { return New(NULL); }

  Welcome* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Welcome& from);
  void MergeFrom(const Welcome& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Welcome* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:protobuf.Welcome)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Welcome* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Authentication

// optional uint64 ID = 1;
inline void Authentication::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Authentication::id() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.ID)
  return id_;
}
inline void Authentication::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Authentication.ID)
}

// optional bytes hash = 2;
inline void Authentication::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authentication::hash() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Authentication.hash)
}
inline void Authentication::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Authentication.hash)
}
inline void Authentication::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Authentication.hash)
}
inline ::std::string* Authentication::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Authentication.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authentication::release_hash() {
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Authentication.hash)
}

// -------------------------------------------------------------------

// AuthenticationReply

// optional bool result = 1;
inline void AuthenticationReply::clear_result() {
  result_ = false;
}
inline bool AuthenticationReply::result() const {
  // @@protoc_insertion_point(field_get:protobuf.AuthenticationReply.result)
  return result_;
}
inline void AuthenticationReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protobuf.AuthenticationReply.result)
}

// -------------------------------------------------------------------

// Login

// optional string name = 1;
inline void Login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Login.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Login.name)
}
inline void Login::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Login.name)
}
inline void Login::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Login.name)
}
inline ::std::string* Login::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Login.name)
}

// optional bytes password = 2;
inline void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:protobuf.Login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Login.password)
}
inline void Login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Login.password)
}
inline void Login::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Login.password)
}
inline ::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Login.password)
}

// -------------------------------------------------------------------

// LoginReply

// optional bool result = 1;
inline void LoginReply::clear_result() {
  result_ = false;
}
inline bool LoginReply::result() const {
  // @@protoc_insertion_point(field_get:protobuf.LoginReply.result)
  return result_;
}
inline void LoginReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protobuf.LoginReply.result)
}

// -------------------------------------------------------------------

// Achievement

// optional uint64 ID = 1;
inline void Achievement::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Achievement::id() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.ID)
  return id_;
}
inline void Achievement::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.ID)
}

// optional .protobuf.Achievement.Type type = 2;
inline void Achievement::clear_type() {
  type_ = 0;
}
inline ::protobuf::Achievement_Type Achievement::type() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.type)
  return static_cast< ::protobuf::Achievement_Type >(type_);
}
inline void Achievement::set_type(::protobuf::Achievement_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.type)
}

// -------------------------------------------------------------------

// AchievementReply

// optional uint64 ID = 1;
inline void AchievementReply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AchievementReply::id() const {
  // @@protoc_insertion_point(field_get:protobuf.AchievementReply.ID)
  return id_;
}
inline void AchievementReply::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.AchievementReply.ID)
}

// optional .protobuf.AchievementReply.Type result = 2;
inline void AchievementReply::clear_result() {
  result_ = 0;
}
inline ::protobuf::AchievementReply_Type AchievementReply::result() const {
  // @@protoc_insertion_point(field_get:protobuf.AchievementReply.result)
  return static_cast< ::protobuf::AchievementReply_Type >(result_);
}
inline void AchievementReply::set_result(::protobuf::AchievementReply_Type value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protobuf.AchievementReply.result)
}

// -------------------------------------------------------------------

// Welcome

// optional bytes key = 1;
inline void Welcome::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Welcome::key() const {
  // @@protoc_insertion_point(field_get:protobuf.Welcome.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Welcome::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Welcome.key)
}
inline void Welcome::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Welcome.key)
}
inline void Welcome::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Welcome.key)
}
inline ::std::string* Welcome::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Welcome.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Welcome::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Welcome::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Welcome.key)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobuf::Achievement_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::Achievement_Type>() {
  return ::protobuf::Achievement_Type_descriptor();
}
template <> struct is_proto_enum< ::protobuf::AchievementReply_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::AchievementReply_Type>() {
  return ::protobuf::AchievementReply_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
