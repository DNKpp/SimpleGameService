// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Achievement;
class Achievement_Ident;
class Authentication;
class AuthenticationAnswer;
class GameIdent;

enum AuthenticationAnswer_Result {
  AuthenticationAnswer_Result_success = 0,
  AuthenticationAnswer_Result_unknown = 1,
  AuthenticationAnswer_Result_wrongPassword = 2,
  AuthenticationAnswer_Result_other = 3,
  AuthenticationAnswer_Result_AuthenticationAnswer_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthenticationAnswer_Result_AuthenticationAnswer_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthenticationAnswer_Result_IsValid(int value);
const AuthenticationAnswer_Result AuthenticationAnswer_Result_Result_MIN = AuthenticationAnswer_Result_success;
const AuthenticationAnswer_Result AuthenticationAnswer_Result_Result_MAX = AuthenticationAnswer_Result_other;
const int AuthenticationAnswer_Result_Result_ARRAYSIZE = AuthenticationAnswer_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthenticationAnswer_Result_descriptor();
inline const ::std::string& AuthenticationAnswer_Result_Name(AuthenticationAnswer_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthenticationAnswer_Result_descriptor(), value);
}
inline bool AuthenticationAnswer_Result_Parse(
    const ::std::string& name, AuthenticationAnswer_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthenticationAnswer_Result>(
    AuthenticationAnswer_Result_descriptor(), name, value);
}
enum Achievement_Ident_Type {
  Achievement_Ident_Type_complete = 0,
  Achievement_Ident_Type_add = 1,
  Achievement_Ident_Type_Achievement_Ident_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Achievement_Ident_Type_Achievement_Ident_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Achievement_Ident_Type_IsValid(int value);
const Achievement_Ident_Type Achievement_Ident_Type_Type_MIN = Achievement_Ident_Type_complete;
const Achievement_Ident_Type Achievement_Ident_Type_Type_MAX = Achievement_Ident_Type_add;
const int Achievement_Ident_Type_Type_ARRAYSIZE = Achievement_Ident_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Achievement_Ident_Type_descriptor();
inline const ::std::string& Achievement_Ident_Type_Name(Achievement_Ident_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Achievement_Ident_Type_descriptor(), value);
}
inline bool Achievement_Ident_Type_Parse(
    const ::std::string& name, Achievement_Ident_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Achievement_Ident_Type>(
    Achievement_Ident_Type_descriptor(), name, value);
}
// ===================================================================

class Authentication : public ::google::protobuf::Message {
 public:
  Authentication();
  virtual ~Authentication();

  Authentication(const Authentication& from);

  inline Authentication& operator=(const Authentication& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Authentication& default_instance();

  void Swap(Authentication* other);

  // implements Message ----------------------------------------------

  inline Authentication* New() const { return New(NULL); }

  Authentication* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Authentication& from);
  void MergeFrom(const Authentication& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Authentication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:protobuf.Authentication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Authentication* default_instance_;
};
// -------------------------------------------------------------------

class AuthenticationAnswer : public ::google::protobuf::Message {
 public:
  AuthenticationAnswer();
  virtual ~AuthenticationAnswer();

  AuthenticationAnswer(const AuthenticationAnswer& from);

  inline AuthenticationAnswer& operator=(const AuthenticationAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticationAnswer& default_instance();

  void Swap(AuthenticationAnswer* other);

  // implements Message ----------------------------------------------

  inline AuthenticationAnswer* New() const { return New(NULL); }

  AuthenticationAnswer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticationAnswer& from);
  void MergeFrom(const AuthenticationAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthenticationAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AuthenticationAnswer_Result Result;
  static const Result success = AuthenticationAnswer_Result_success;
  static const Result unknown = AuthenticationAnswer_Result_unknown;
  static const Result wrongPassword = AuthenticationAnswer_Result_wrongPassword;
  static const Result other = AuthenticationAnswer_Result_other;
  static inline bool Result_IsValid(int value) {
    return AuthenticationAnswer_Result_IsValid(value);
  }
  static const Result Result_MIN =
    AuthenticationAnswer_Result_Result_MIN;
  static const Result Result_MAX =
    AuthenticationAnswer_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    AuthenticationAnswer_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return AuthenticationAnswer_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return AuthenticationAnswer_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return AuthenticationAnswer_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protobuf.AuthenticationAnswer.Result result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::protobuf::AuthenticationAnswer_Result result() const;
  void set_result(::protobuf::AuthenticationAnswer_Result value);

  // @@protoc_insertion_point(class_scope:protobuf.AuthenticationAnswer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static AuthenticationAnswer* default_instance_;
};
// -------------------------------------------------------------------

class Achievement_Ident : public ::google::protobuf::Message {
 public:
  Achievement_Ident();
  virtual ~Achievement_Ident();

  Achievement_Ident(const Achievement_Ident& from);

  inline Achievement_Ident& operator=(const Achievement_Ident& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement_Ident& default_instance();

  void Swap(Achievement_Ident* other);

  // implements Message ----------------------------------------------

  inline Achievement_Ident* New() const { return New(NULL); }

  Achievement_Ident* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement_Ident& from);
  void MergeFrom(const Achievement_Ident& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Achievement_Ident* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Achievement_Ident_Type Type;
  static const Type complete = Achievement_Ident_Type_complete;
  static const Type add = Achievement_Ident_Type_add;
  static inline bool Type_IsValid(int value) {
    return Achievement_Ident_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Achievement_Ident_Type_Type_MIN;
  static const Type Type_MAX =
    Achievement_Ident_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Achievement_Ident_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Achievement_Ident_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Achievement_Ident_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Achievement_Ident_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .protobuf.Achievement.Ident.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::protobuf::Achievement_Ident_Type type() const;
  void set_type(::protobuf::Achievement_Ident_Type value);

  // @@protoc_insertion_point(class_scope:protobuf.Achievement.Ident)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Achievement_Ident* default_instance_;
};
// -------------------------------------------------------------------

class Achievement : public ::google::protobuf::Message {
 public:
  Achievement();
  virtual ~Achievement();

  Achievement(const Achievement& from);

  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();

  void Swap(Achievement* other);

  // implements Message ----------------------------------------------

  inline Achievement* New() const { return New(NULL); }

  Achievement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Achievement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Achievement_Ident Ident;

  // accessors -------------------------------------------------------

  // optional .protobuf.GameIdent gameID = 1;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  const ::protobuf::GameIdent& gameid() const;
  ::protobuf::GameIdent* mutable_gameid();
  ::protobuf::GameIdent* release_gameid();
  void set_allocated_gameid(::protobuf::GameIdent* gameid);

  // repeated .protobuf.Achievement.Ident achievements = 2;
  int achievements_size() const;
  void clear_achievements();
  static const int kAchievementsFieldNumber = 2;
  const ::protobuf::Achievement_Ident& achievements(int index) const;
  ::protobuf::Achievement_Ident* mutable_achievements(int index);
  ::protobuf::Achievement_Ident* add_achievements();
  ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >*
      mutable_achievements();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >&
      achievements() const;

  // @@protoc_insertion_point(class_scope:protobuf.Achievement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::protobuf::GameIdent* gameid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident > achievements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Achievement* default_instance_;
};
// -------------------------------------------------------------------

class GameIdent : public ::google::protobuf::Message {
 public:
  GameIdent();
  virtual ~GameIdent();

  GameIdent(const GameIdent& from);

  inline GameIdent& operator=(const GameIdent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameIdent& default_instance();

  void Swap(GameIdent* other);

  // implements Message ----------------------------------------------

  inline GameIdent* New() const { return New(NULL); }

  GameIdent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameIdent& from);
  void MergeFrom(const GameIdent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameIdent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 gameID = 1;
  void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  ::google::protobuf::uint64 gameid() const;
  void set_gameid(::google::protobuf::uint64 value);

  // optional bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:protobuf.GameIdent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static GameIdent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Authentication

// optional string name = 1;
inline void Authentication::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authentication::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Authentication.name)
}
inline void Authentication::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Authentication.name)
}
inline void Authentication::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Authentication.name)
}
inline ::std::string* Authentication::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Authentication.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authentication::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Authentication.name)
}

// optional bytes password = 2;
inline void Authentication::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Authentication::password() const {
  // @@protoc_insertion_point(field_get:protobuf.Authentication.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Authentication.password)
}
inline void Authentication::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Authentication.password)
}
inline void Authentication::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Authentication.password)
}
inline ::std::string* Authentication::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Authentication.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Authentication::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Authentication::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Authentication.password)
}

// -------------------------------------------------------------------

// AuthenticationAnswer

// optional .protobuf.AuthenticationAnswer.Result result = 1;
inline void AuthenticationAnswer::clear_result() {
  result_ = 0;
}
inline ::protobuf::AuthenticationAnswer_Result AuthenticationAnswer::result() const {
  // @@protoc_insertion_point(field_get:protobuf.AuthenticationAnswer.result)
  return static_cast< ::protobuf::AuthenticationAnswer_Result >(result_);
}
inline void AuthenticationAnswer::set_result(::protobuf::AuthenticationAnswer_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protobuf.AuthenticationAnswer.result)
}

// -------------------------------------------------------------------

// Achievement_Ident

// optional uint64 ID = 1;
inline void Achievement_Ident::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Achievement_Ident::id() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.Ident.ID)
  return id_;
}
inline void Achievement_Ident::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.Ident.ID)
}

// optional .protobuf.Achievement.Ident.Type type = 2;
inline void Achievement_Ident::clear_type() {
  type_ = 0;
}
inline ::protobuf::Achievement_Ident_Type Achievement_Ident::type() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.Ident.type)
  return static_cast< ::protobuf::Achievement_Ident_Type >(type_);
}
inline void Achievement_Ident::set_type(::protobuf::Achievement_Ident_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Achievement.Ident.type)
}

// -------------------------------------------------------------------

// Achievement

// optional .protobuf.GameIdent gameID = 1;
inline bool Achievement::has_gameid() const {
  return !_is_default_instance_ && gameid_ != NULL;
}
inline void Achievement::clear_gameid() {
  if (GetArenaNoVirtual() == NULL && gameid_ != NULL) delete gameid_;
  gameid_ = NULL;
}
inline const ::protobuf::GameIdent& Achievement::gameid() const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.gameID)
  return gameid_ != NULL ? *gameid_ : *default_instance_->gameid_;
}
inline ::protobuf::GameIdent* Achievement::mutable_gameid() {
  
  if (gameid_ == NULL) {
    gameid_ = new ::protobuf::GameIdent;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Achievement.gameID)
  return gameid_;
}
inline ::protobuf::GameIdent* Achievement::release_gameid() {
  
  ::protobuf::GameIdent* temp = gameid_;
  gameid_ = NULL;
  return temp;
}
inline void Achievement::set_allocated_gameid(::protobuf::GameIdent* gameid) {
  delete gameid_;
  gameid_ = gameid;
  if (gameid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Achievement.gameID)
}

// repeated .protobuf.Achievement.Ident achievements = 2;
inline int Achievement::achievements_size() const {
  return achievements_.size();
}
inline void Achievement::clear_achievements() {
  achievements_.Clear();
}
inline const ::protobuf::Achievement_Ident& Achievement::achievements(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Achievement.achievements)
  return achievements_.Get(index);
}
inline ::protobuf::Achievement_Ident* Achievement::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Achievement.achievements)
  return achievements_.Mutable(index);
}
inline ::protobuf::Achievement_Ident* Achievement::add_achievements() {
  // @@protoc_insertion_point(field_add:protobuf.Achievement.achievements)
  return achievements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >*
Achievement::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Achievement.achievements)
  return &achievements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Achievement_Ident >&
Achievement::achievements() const {
  // @@protoc_insertion_point(field_list:protobuf.Achievement.achievements)
  return achievements_;
}

// -------------------------------------------------------------------

// GameIdent

// optional uint64 gameID = 1;
inline void GameIdent::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameIdent::gameid() const {
  // @@protoc_insertion_point(field_get:protobuf.GameIdent.gameID)
  return gameid_;
}
inline void GameIdent::set_gameid(::google::protobuf::uint64 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.GameIdent.gameID)
}

// optional bytes hash = 2;
inline void GameIdent::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameIdent::hash() const {
  // @@protoc_insertion_point(field_get:protobuf.GameIdent.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameIdent::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.GameIdent.hash)
}
inline void GameIdent::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.GameIdent.hash)
}
inline void GameIdent::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.GameIdent.hash)
}
inline ::std::string* GameIdent::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.GameIdent.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameIdent::release_hash() {
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameIdent::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protobuf.GameIdent.hash)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobuf::AuthenticationAnswer_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::AuthenticationAnswer_Result>() {
  return ::protobuf::AuthenticationAnswer_Result_descriptor();
}
template <> struct is_proto_enum< ::protobuf::Achievement_Ident_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::Achievement_Ident_Type>() {
  return ::protobuf::Achievement_Ident_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
